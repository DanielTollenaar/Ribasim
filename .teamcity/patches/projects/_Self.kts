package patches.projects

import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.Project
import jetbrains.buildServer.configs.kotlin.projectFeatures.AwsConnection
import jetbrains.buildServer.configs.kotlin.projectFeatures.GitHubIssueTracker
import jetbrains.buildServer.configs.kotlin.projectFeatures.S3Storage
import jetbrains.buildServer.configs.kotlin.projectFeatures.awsConnection
import jetbrains.buildServer.configs.kotlin.projectFeatures.githubIssues
import jetbrains.buildServer.configs.kotlin.projectFeatures.s3Storage
import jetbrains.buildServer.configs.kotlin.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the root project
accordingly, and delete the patch script.
*/
changeProject(DslContext.projectId) {
    check(archived == false) {
        "Unexpected archived: '$archived'"
    }
    archived = true

    features {
        val feature1 = find<AwsConnection> {
            awsConnection {
                id = "AmazonWebServicesAws"
                name = "Amazon Web Services (AWS)"
                regionName = "eu-west-3"
                credentialsType = static {
                    accessKeyId = "AKIAQBIN2MPWXSD2IZ5F"
                    secretAccessKey = "credentialsJSON:dba90026-9856-4f87-94d9-bab91f3f2d5c"
                    useSessionCredentials = false
                    stsEndpoint = "https://sts.eu-west-3.amazonaws.com"
                }
            }
        }
        feature1.apply {
        }
        val feature2 = find<GitHubIssueTracker> {
            githubIssues {
                id = "PROJECT_EXT_107"
                displayName = "Ribasim GitHub Issues"
                repositoryURL = "https://github.com/Deltares/Ribasim"
            }
        }
        feature2.apply {
        }
        val feature3 = find<S3Storage> {
            s3Storage {
                id = "s3_ribasim"
                storageName = "s3"
                bucketName = "ribasim"
                bucketPrefix = "teamcity"
                awsEnvironment = default {
                    awsRegionName = "eu-west-3"
                }
                credentials = accessKeys()
                accessKeyID = "AKIAQBIN2MPWXSD2IZ5F"
                accessKey = "credentialsJSON:dba90026-9856-4f87-94d9-bab91f3f2d5c"
            }
        }
        feature3.apply {
        }
    }
}
