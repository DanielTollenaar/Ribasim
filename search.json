[
  {
    "objectID": "coupling-demo.html",
    "href": "coupling-demo.html",
    "title": "Bach",
    "section": "",
    "text": "In our test cases, we will work with the Dutch national groundwater model (LHM). For testing, we simplify the top boundary conditions to just three surface water “systems”, from large to small:\n\nPrimary\nSecondary\nTertiary\n\nThese systems are separated in the groundwater model schematization due to the relatively small size of the surface waters (several meters in width) in comparison with relatively coarse cells of the groundwater model (250 m): most cells in the LHM contain more than one surface water, and are included via representative parameters which take the physical scaling into account. In case of sufficiently small cell sizes, no overlap occurs and all surface waters can be represented in a single grid.\nBach has no knowledge of these systems unless explicitly separated into different (sub-)basins. In the examples below, these three systems are represented by one basin with a single volume. For the purposes of testing, we have not yet created empirical volume-level relationships for the surface water of every cell extracted from a hydraulic model. Instead, we have chosen an (over)simplified parametrization of the hydraulic properties, which makes it easy to verify the behavior of Bach and the coupling procedures:\n\nPrimary, secondary, and tertiary systems have a rectangular profile: the area of the surface water does not change with water level or volume.\nWater depth is constant for a system within a basin.\nWater depth increases linearly with volume. (This follows from 1.)\nWater depth is distributed across the systems in a geometric progression: when the tertiary system contains 0.1 m of water, the secondary system contains 0.2 m, and the primary system contains 0.4 m.\nWater depth is 0.0 m for all systems when basin volume is 0.0. (This follows from 4.)\nThe distribution of water occurs according to the surface water area (width times length) used for the LHM parametrization of river bed conductance.\n\nFor freely draining basins, a simplified storage-discharge relationship has been derived as follows:\n\nThe area of the basin polygon has been multiplied by 1 mm/d (roughly the average precipitation excess in the Netherlands). This yields a “normative discharge”.\nA corresponding normative volume has been chosen, corresponding with water depths of 0.4, 0.2, and 0.1 m for the primary, secondary, and tertiary surface waters respectively.\nA dead storage volume has been chosen, corresponding with water depths of 0.2, 0.1, and 0.05 m for the primary, secondary, and tertiary surface waters respectively. The basin only starts discharging when the storage volume exceeds this value.\n\n\n\n\n\n\n\nNote\n\n\n\nBach is not limited to such oversimplified parametrization! Bach uses tabulations and therefore supports arbitrary (piecewise linear) volume-depth and volume-discharge relationships.\n\n\nA visual representation of this simplified conceptual schematization is given in Figure 1 and Figure 2.\n\n\n\nFigure 1: Distribution of water depths over the primary, secondary, and tertiary system.\n\n\n\n\n\nFigure 2: Discharge as a function of basin storage volume.\n\n\nAn example of the resulting parameters for a single cell is shown in Table 1. The first row shows the water levels when the basin is empty. The level for primary, secondary, and tertiary are equal to the bottom elevation of the surface waters. The second row shows the volume and levels for water depths of 0.4, 0.2, and 0.1 m. The third row shows the volume and levels for a tenfold larger volume. This results in implausible water levels with depths of 4.0, 2.0 and 1.0 m; the water level in the primary system is over two meters higher than in the tertiary system. In reality, the surface waters would overflow and surface ponding would occur; this mechanism is ignored in the test cases for the sake of simplicity.\n\n\nTable 1: Volume-level table for a single cell in the Hupsel basin.\n\n\nVolume (m3)\nPrimary (m NAP)\nSecondary (m NAP)\nTertiary (m NAP)\n\n\n\n\n0.0\n25.65\n25.83\n26.60\n\n\n6843.1\n26.05\n26.03\n26.70\n\n\n68431.0\n29.65\n27.83\n27.60\n\n\n\n\nFigure 3 shows the volume of the first row of the cell based input for the primary system. Symbology is set to unique values. While water levels differ per cell in this parametrization, the “normative volume” defined above is shared by all cells in a basin.\n\n\n\nFigure 3: Basin normative volume.\n\n\nFigure 3 shows the water level corresponding to the normative storage volume based input for the primary system (it corresponds to the value shown in the first row of the primary colum in Table 1). We see a clear gradient from west to east: as our simplified parametrization assumes a constant water depth for all cells in a single system, water levels spatially fall and rise with the bottom elevation.\n\n\n\nFigure 4: Water level corresponding to normative basin volume."
  },
  {
    "objectID": "coupling-demo.html#budgets",
    "href": "coupling-demo.html#budgets",
    "title": "Bach",
    "section": "1.1 Budgets",
    "text": "1.1 Budgets\nTable … shows the budgets computed by MODFLOW6 per primary, secondary, and tertiary system. These are compared to the budget computed by the coupling procedure, which uses equation …\nAs expected, these numbers match exactly."
  },
  {
    "objectID": "coupling-demo.html#zero-volume",
    "href": "coupling-demo.html#zero-volume",
    "title": "Bach",
    "section": "1.2 Zero volume",
    "text": "1.2 Zero volume"
  },
  {
    "objectID": "demo.html",
    "href": "demo.html",
    "title": "Bach",
    "section": "",
    "text": "On this page we present a range of mostly synthetic models, set up to highlight individual functionalities of Bach. The demonstrations are divided across two sections, in Section 2 free-flowing basins are used, which can drain freely to a downstream basin. In Section 3 level controlled basins are used. Here there is no free drainage, but water levels are controlled by water management, such as pumping."
  },
  {
    "objectID": "demo.html#sec-free-no",
    "href": "demo.html#sec-free-no",
    "title": "Bach",
    "section": "2.1 No external forcing",
    "text": "2.1 No external forcing\nThis fictional free flowing LSW has no input or output forcing flux. The LSW empties according to the Volume-Area-Discharge relationship. The two examples below show the impact the profile has on the LSW drainage.\n\n\nCode\ncase = \"emptying_sloping_profile\"\n\n## Set up\ndemoconfig = Dict{String,Any}()\nlsw_id = 1\ndemoconfig[\"lsw_ids\"] = [lsw_id]\ndemoconfig[\"update_timestep\"] = 86400.0\ndemoconfig[\"starttime\"] = Date(\"2022-01-01\")\ndemoconfig[\"endtime\"] = Date(\"2022-02-01\")\ndemoconfig[\"state\"] = DataFrame(location=lsw_id, volume=1e6)\ndemoconfig[\"static\"] = DataFrame(location=lsw_id, target_level=NaN, target_volume=NaN, depth_surface_water=NaN, local_surface_water_type='V')\ndemoconfig[\"forcing\"] = DataFrame(time=DateTime[], variable=Symbol[], location=Int[], value=Float64[])\ndemoconfig[\"profile\"] = DataFrame(location=lsw_id, volume=[0.0, 1e6], area=[1e6, 1e6], discharge=[0.0, 1e0], level=[10.0, 11.0])\n\n## Simulate\nreg = BMI.initialize(Bach.Register, democonfig)\nsolve!(reg.integrator)\n\n## Plot results\nDuet.plot_series(reg, lsw_id)\n\n\n\n\n\n\n\nCode\ncase = \"emptying_steep_profile_Hupsel\"\n\n## Set up\ndemoconfig = Dict{String,Any}()\nlsw_id = 1\ndemoconfig[\"lsw_ids\"] = [lsw_id]\ndemoconfig[\"update_timestep\"] = 86400.0\ndemoconfig[\"starttime\"] = Date(\"2022-01-01\")\ndemoconfig[\"endtime\"] = Date(\"2022-02-01\")\ndemoconfig[\"state\"] = DataFrame(location=lsw_id, volume=1e6)\ndemoconfig[\"static\"] = DataFrame(location=lsw_id, target_level=NaN, target_volume=NaN, depth_surface_water=NaN, local_surface_water_type='V')\ndemoconfig[\"forcing\"] = DataFrame(time=DateTime[], variable=Symbol[], location=Int[], value=Float64[])\n# profile from Hupsel\ndemoconfig[\"profile\"] = DataFrame(location =[1,1,1,1], volume=[0.0, 7427.697265625, 14855.39453125, 750197.375], area=[92152.2890625, 92152.2890625, 92152.2890625, 92152.2890625], discharge=[0.0, 0.0, 0.09600285440683365, 9.600285530090332], level= [18.909799575805664, 19.109800338745117, 19.309799194335938, 39.109798431396484])\n\n## Simulate\nreg = BMI.initialize(Bach.Register, democonfig)\nsolve!(reg.integrator)\n\n## Plot results\nDuet.plot_series(reg, lsw_id)"
  },
  {
    "objectID": "demo.html#precipitation-forcing",
    "href": "demo.html#precipitation-forcing",
    "title": "Bach",
    "section": "2.2 Precipitation forcing",
    "text": "2.2 Precipitation forcing\nThis fictional free flowing LSW is simulated with only the external forcing of synthetic precipitation data. The storage and the outflow respond to the preciptation as shown below.\n\n\nCode\ncase = \"precipitation\"\n\n## Set up\ndemoconfig[\"starttime\"] = Date(\"2019-01-01\")\ndemoconfig[\"endtime\"] = Date(\"2020-01-01\")\ndummydata = @subset(lswforcing, :variable == Symbol(\"precipitation\"), :location == 151358, :time >= config[\"starttime\"], :time <= config[\"endtime\"])\ndummydata.location .= lsw_id\ndemoconfig[\"forcing\"] = DataFrame(time=dummydata.time, variable=dummydata.variable, location=dummydata.location, value=dummydata.value * 3) # Exaggerated for demo\ndemoconfig[\"profile\"] = DataFrame(location=lsw_id, volume=[0.0, 1e6], area=[1e6, 1e6], discharge=[0.0, 1e0], level=[10.0, 11.0])\n\n# Simulate\nreg = BMI.initialize(Bach.Register, democonfig)\nsolve!(reg.integrator)\n\n# Plot results\nDuet.plot_series(reg, lsw_id)"
  },
  {
    "objectID": "demo.html#evaporation-forcing",
    "href": "demo.html#evaporation-forcing",
    "title": "Bach",
    "section": "2.3 Evaporation forcing",
    "text": "2.3 Evaporation forcing\nThe LSW loses water from evaporation. Outflow occurs according to the relation as in Section 2.1, but overall volume decline is faster rate due to additional loss from evaporation. Evaporation does not occur in an empty LSW.\nThe second example shows the LSW with no simulated discharge, so that the only output is evaporation\n\n\nCode\ncase = \"evaporation\"\n\n## Set up\nlsw_id = 1\ndemoconfig[\"starttime\"] = Date(\"2019-01-01\")\ndemoconfig[\"endtime\"] = Date(\"2019-06-01\")\ndummydata = @subset(lswforcing, :variable == Symbol(\"evaporation\"), :location == 151358)\ndemoconfig[\"forcing\"] = DataFrame(time=dummydata.time, variable=dummydata.variable, location=lsw_id, value=dummydata.value * 3)\ndemoconfig[\"profile\"] = DataFrame(location=lsw_id, volume=[0.0, 1e6], area=[1e6, 1e6], discharge=[0.0, 1e0], level=[10.0, 11.0])\n\n## Simulate\nreg = BMI.initialize(Bach.Register, democonfig)\nsolve!(reg.integrator)\n\n## Plot results\nDuet.plot_series(reg, lsw_id)\n\n\n\n\n\n\n\nCode\ncase = \"evaporation2\"\n\n## Set up\nconfig = Dict{String,Any}()\nlsw_id = 1\nconfig[\"lsw_ids\"] = [lsw_id]\nconfig[\"update_timestep\"] = 86400.0\nstarttime = DateTime(\"2019-01-01\")\nconfig[\"starttime\"] = DateTime(\"2019-01-01\")\nconfig[\"endtime\"] = Date(\"2019-06-01\")\nconfig[\"state\"] = DataFrame(location=lsw_id, volume=1e6)\nconfig[\"static\"] = DataFrame(location=lsw_id, target_level=NaN, target_volume=NaN,\n    depth_surface_water=NaN, local_surface_water_type='V')\nconfig[\"forcing\"] = DataFrame(time=starttime, variable=:evaporation, location=lsw_id,\n    value=1e-6)\nconfig[\"profile\"] = DataFrame(location=lsw_id, volume=[0.0, 1e6], area=[1e6, 1e6],\n    discharge=[0.0, 0.0], level=[10.0, 11.0])\n\n# Simulate\nreg = BMI.initialize(Bach.Register, config)\nsolve!(reg.integrator)\n\n# Plot\nDuet.plot_series(reg, lsw_id)"
  },
  {
    "objectID": "demo.html#evaporation-and-precipitation-forcings",
    "href": "demo.html#evaporation-and-precipitation-forcings",
    "title": "Bach",
    "section": "2.4 Evaporation and precipitation forcings",
    "text": "2.4 Evaporation and precipitation forcings\nThis example shows the evaporation and precipitation flux simulated together.\n\n\nCode\ncase = \"evaporation_precipitation\"\n\n## Set up\ndemoconfig[\"starttime\"] = Date(\"2019-01-01\")\ndemoconfig[\"endtime\"] = Date(\"2019-06-01\")\ndummydata_e = @subset(lswforcing, :variable == Symbol(\"evaporation\"), :location == 151358)\ndummydata_p = @subset(lswforcing, :variable == Symbol(\"precipitation\"), :location == 151358)\ndummydata = append!(dummydata_e, dummydata_p);\nsort!(dummydata, [order(:time, rev=false)]);\ndemoconfig[\"forcing\"] = DataFrame(time=dummydata.time, variable=dummydata.variable, location=lsw_id, value=dummydata.value * 3)\n\n## Simulate\nreg = BMI.initialize(Bach.Register, democonfig)\nsolve!(reg.integrator)\n\n## Plot\nDuet.plot_series(reg, lsw_id)"
  },
  {
    "objectID": "demo.html#infiltration",
    "href": "demo.html#infiltration",
    "title": "Bach",
    "section": "2.5 Infiltration",
    "text": "2.5 Infiltration\nInfiltration is a negative flux of the LSW. This example shows the LSW storage responding to an enhanced forcing of infiltration. There is no outflow simulated of this LSW, so that the only output is the infiltration.\n\n\nCode\ncase = \"Infiltration\"\n\n## Set up\nconfig = Dict{String,Any}()\nlsw_id = 1\nconfig[\"lsw_ids\"] = [lsw_id]\nconfig[\"update_timestep\"] = 86400.0\nstarttime = DateTime(\"2019-01-01\")\nconfig[\"starttime\"] = starttime\nconfig[\"endtime\"] = Date(\"2019-02-01\")\nconfig[\"state\"] = DataFrame(location=lsw_id, volume=1e6)\nconfig[\"static\"] = DataFrame(location=lsw_id, target_level=NaN, target_volume=NaN,\n    depth_surface_water=NaN, local_surface_water_type='V')\nconfig[\"forcing\"] = DataFrame(time=starttime, variable=:infiltration,\n    location=lsw_id, value=1.5e-6)\nconfig[\"profile\"] = DataFrame(location=lsw_id, volume=[0.0, 1e6], area=[1e6, 1e6],\n    discharge=[0.0, 0.0], level=[10.0, 11.0])\n\n## Simulate\nreg = BMI.initialize(Bach.Register, config)\nsolve!(reg.integrator)\n\n## Plot results\nDuet.plot_series(reg, lsw_id)"
  },
  {
    "objectID": "demo.html#urban-runoff",
    "href": "demo.html#urban-runoff",
    "title": "Bach",
    "section": "2.6 Urban Runoff",
    "text": "2.6 Urban Runoff\nUrban runoff is a surface water input to the LSW. In case of the Netherlands, this is not calculated by MODFLOW but by the unsaturated zone model MetaSWAP. This example shows the LSW storage responding to the influx forcing of urban runoff.\n\n\nCode\ncase = \"Urban Runoff\"\n\n## Set up\ndemoconfig[\"starttime\"] = Date(\"2019-01-01\")\ndemoconfig[\"endtime\"] = Date(\"2019-06-01\")\ndummydata = @subset(lswforcing, :variable == Symbol(\"urban_runoff\"), :location == 151358)\ndummydata.value *= 100 # Emphasised to highlight the functionality\ndemoconfig[\"forcing\"] = DataFrame(time=dummydata.time, variable=dummydata.variable, location=lsw_id, value=dummydata.value)\n\n## Simulate\nreg = BMI.initialize(Bach.Register, democonfig)\nsolve!(reg.integrator)\n\n## Plot\nDuet.plot_series(reg, lsw_id)"
  },
  {
    "objectID": "demo.html#allocation-to-multiple-users-agriculture-and-industry",
    "href": "demo.html#allocation-to-multiple-users-agriculture-and-industry",
    "title": "Bach",
    "section": "2.7 Allocation to multiple users (agriculture and industry)",
    "text": "2.7 Allocation to multiple users (agriculture and industry)\nThe allocation is based upon demand and prioritisation of the users and the available water in the LSW. In a free flowing LSW only water from the LSW can be abstracted by the users: agriculture and industry. In this example there are two users. Agriculture has higher prioirty than industry, therefore when there is a shortage of available water, agriculture abstracts water before industry as demonstrated.\nWhen water supply is limited, the model follows “de verdringingsreeks” (water prioritization rules in times of water shortage in the Netherlands)."
  },
  {
    "objectID": "demo.html#sec-free-balance",
    "href": "demo.html#sec-free-balance",
    "title": "Bach",
    "section": "2.8 Water balance of a single LSW (Hupsel)",
    "text": "2.8 Water balance of a single LSW (Hupsel)\nThis simulation is for the LSW Hupsel. The LSW is a free flowing LSW."
  },
  {
    "objectID": "demo.html#sec-free-comparison",
    "href": "demo.html#sec-free-comparison",
    "title": "Bach",
    "section": "2.9 Water balance comparison Hupsel",
    "text": "2.9 Water balance comparison Hupsel\nThe following two figures show Hupsel LSW water balance for the Bach prototype compared to the water balance simulated by Mozart, the precursor to Bach. The figures show a good agreement between the two simulations."
  },
  {
    "objectID": "demo.html#single-level-controlled-lsw-tol",
    "href": "demo.html#single-level-controlled-lsw-tol",
    "title": "Bach",
    "section": "3.1 Single Level Controlled LSW (Tol)",
    "text": "3.1 Single Level Controlled LSW (Tol)\nThis simulation is for the LSW De Tol. The LSW is a level controlled meaning that water is allocated to maintain water levels at a target level."
  },
  {
    "objectID": "demo.html#single-level-controlled-lsw-with-additional-general-users",
    "href": "demo.html#single-level-controlled-lsw-with-additional-general-users",
    "title": "Bach",
    "section": "3.2 Single Level Controlled LSW with additional General Users",
    "text": "3.2 Single Level Controlled LSW with additional General Users\nThis simulation is for a hypothetical level controlled LSW situation. This level control LSW has an additional users (agriculture) with a lower priority than the level control. In this scenario water is allocated to the users irder of priority, first based on the level of the LSW with respect to the target level, and additionally with water from the external network when required. The LSW is a level controlled meaning that water is allocated to maintain water levels at a target level.\n\n\nCode\ncase = \"LevelControl_MultipleUsers\"\n\n## Set up\n\n\n\n\"LevelControl_MultipleUsers\""
  },
  {
    "objectID": "demo.html#de-tol-water-balance-comparison-with-mozart",
    "href": "demo.html#de-tol-water-balance-comparison-with-mozart",
    "title": "Bach",
    "section": "3.3 De Tol water balance comparison with Mozart",
    "text": "3.3 De Tol water balance comparison with Mozart\nThe following two figures show De Tol LSW water balance for the Bach prototype compared to the water balance simulated by Mozart, the precursor to Bach. The figures show a good agreement between the two simulations"
  },
  {
    "objectID": "equations.html",
    "href": "equations.html",
    "title": "Water balance",
    "section": "",
    "text": "Bach currently simulates the following “natural” water balance terms:\nAdditionally, Bach simulates the following “allocated” water balance terms:\nDepending on the type of boundary conditions, Bach requires relation between storage volume and wetted area (\\(A\\)), and between the storage volume and the water level (\\(h\\)). These are (currently) represented by piecewise linear relationships."
  },
  {
    "objectID": "equations.html#precipitation",
    "href": "equations.html#precipitation",
    "title": "Water balance",
    "section": "1.1 Precipitation",
    "text": "1.1 Precipitation\nThe precipitation term is given by:\n\\[\nQ_P = P A(S)\n\\]\nWhere \\(P\\) is the precipitation rate and \\(A\\) is the wetted area. \\(A\\) is a function of storage: as the volume of water changes, the area of the free water surface may change as well, depending on the slopes of the surface waters."
  },
  {
    "objectID": "equations.html#evaporation",
    "href": "equations.html#evaporation",
    "title": "Water balance",
    "section": "1.2 Evaporation",
    "text": "1.2 Evaporation\nThe evaporation term is given by:\n\\[\nQ_E = E_{pot} A(S) * (0.5 \\tanh(S - 50.0) / 10.0) + 0.5\n\\]\nWhere \\(E_{pot}\\) is the potential evaporation rate and \\(A\\) is the wetted area. The \\((0.5 \\tanh(S - 50.0) / 10.0) + 0.5\\) term ensures no evaporation occurs when \\(S <= 0\\) and is a sigmoid function which provides a smooth gradient as \\(S \\rightarrow 0\\).\nA straightforward formulation \\(Q_E = \\mathrm{max}(E_{pot} A(S), 0)\\) is unsuitable, as \\(\\frac{\\mathrm{d}Q_E}{\\mathrm{d}S}\\) is \\(\\infty\\) at \\(S = 0\\). A hyperbolic tangent is a commonly used activation function (Wikipedia contributors 2022) to approximate on-off behavior while preserving a smooth derivative.\nA non-smooth derivative results in extremely small timesteps and long computation time: ModelingToolkit identifies the singular behavior and adjusts it timestepping. In a physical interpretation, evaporation is switched on or off per individual droplet of water. In general, the effect of the sigmoid term is negligible, or not even necessary. As a surface water dries, its wetted area decreases and so does the evaporative flux. However, for (simplified) cases with constant wetted surface (a rectangular profile), evaporation only stops at \\(S = 0\\)."
  },
  {
    "objectID": "equations.html#infiltration-and-drainage",
    "href": "equations.html#infiltration-and-drainage",
    "title": "Water balance",
    "section": "1.3 Infiltration and Drainage",
    "text": "1.3 Infiltration and Drainage\nInfiltration is provided as a lump sum for the basin. If Bach is coupled with MODFLOW6, the infiltration is computed as the sum of all positive flows of the MODFLOW6 boundary conditions in the basin:\n\\[\nQ_{inf} = \\sum_{i=1}^{n} \\sum_{j=1}^{m} \\max(Q_{\\mathrm{mf6}_{i,j}}, 0.0)\n\\]\nWhere \\(i\\) is the index of the boundary condition, \\(j\\) the MODFLOW6 cell index, \\(n\\) the number of boundary conditions, and \\(m\\) the number of MODFLOW6 cells in the basin. \\(Q_{\\mathrm{mf6}_{i,j}}\\) is the flow computed by MODFLOW6 for cell \\(j\\) for boundary condition \\(i\\).\nDrainage is a lump sump for the basin, and consists of the sum of the absolute value of all negative flows of the MODFLOW6 boundary conditions in the basin.\n\\[\nQ_{drn} = \\sum_{i=1}^{n} \\sum_{j=1}^{m} \\left| \\min(Q_{\\mathrm{mf6}_{i,j}}, 0.0) \\right|\n\\]\nThe interaction with MODFLOW6 boundary conditions is explained in greater detail in the MODFLOW Coupling section of this documentation."
  },
  {
    "objectID": "equations.html#upstream-and-downstream-flow",
    "href": "equations.html#upstream-and-downstream-flow",
    "title": "Water balance",
    "section": "1.4 Upstream and downstream flow",
    "text": "1.4 Upstream and downstream flow\nBach’s basins can be connected to each other, and each basin expects an explicit connection. Two connections are currently available for inter-basin flows:\n\nOutflowTable\nLevelLink\n\nThe flow direction of the basin is not pre-determined: flow directions may freely reverse, provided the connection allows it. Currently, a LevelLink allows bidirectional flow, but the\nAdditionally, two additional “connections” area available for the “outmost” basins (external nodes) in a network.\n\nNoFlowBoundary\nHeadBoundary\n\n\n1.4.1 OutflowTable\nThe OutflowTable is a tabulation of a basin’s discharge behavior. It describes a piecewise linear relationship between the basin’s storage volume and its discharge. It can be understood as an emprical description of a basin’s properties. This can include a weir, but also the lumped hydraulic behavior of the upstream channels.\nThe OutflowTable should indicate at which volume no discharge occurs (the dead storage volume).\n\n\n\n\n\n\nNote\n\n\n\nCurrently, the discharge relies only on the basin’s volume; it could also use the volume of both connected basins to simulate backwater effects, submersion of weirs, or even reversal of flows for high precipitation events.\n\n\n\n\n1.4.2 LevelLink\nA LevelLink connects two basins together. The flow between the two basins is determined by a linear relationship:\n\\[\nQ = C (h_a - h_b)\n\\]\nWhere \\(h_a\\) is the water level in the first basin, \\(h_b\\) is the water level in the second basin, and \\(C\\) is the conductance of the link. A LevelLink makes no assumptions about the direction of the flow: water flows from high to low.\n\n\n1.4.3 NoFlowBoundary\nThis sets the exchange flow to 0.\n\n\n1.4.4 HeadBoundary\nThis sets the water level in the basin to a fixed level; lower or higher level result in instantaneous corrective fluxes."
  },
  {
    "objectID": "equations.html#general-user",
    "href": "equations.html#general-user",
    "title": "Water balance",
    "section": "2.1 General User",
    "text": "2.1 General User\nThe General User category include the users Agriculture, Industry and Public Water supply. These users extract water from the basin and the demand (\\(\\demuser\\)) is determined externally. The source of water allocated to the General User is dependent on if the basin is a free-flowing type basin or a level-controlled basin.\nIf the basin is free-flowing, the water source will be the available water within the basin. If the basin is level-controlled additional water can be sourced from the regional network, should the water available from the basin be insufficient to satisfy \\(\\demuser\\).\nThe availability of water (\\(\\qavail\\)) internally in a basin in a given timestep is calculated by Equation 1. This volume is available to be extracted by the General Users. In the Bach prototype, additional water from the regional network is currently modelled as an unlimited supply.\n\\[\n\\qavail = \\frac{(P - E_{pot}) \\cdot \\mathit{area}}{\\mathrm{Δ}t} - \\min(0, Q_{infil} - Q_{drain} - Q_{runoff})\n\\tag{1}\\]\nThe \\(\\qavail\\) can be assigned to multiple users in the same basin. Allocation is based upon user priority. For a given user, in the case where \\(\\qavail > \\demuser\\), the user demand is satisfied and the remaining \\(\\qavail\\) becomes available for the user of next highest priority. For a given user, in the case where \\(\\demuser > \\qavail\\) then all of the available water is assigned to the user. This results in an allocation shortage and no remaining local water for any users of lower priority.\nHowever, as discussed, if the basin is a level-controlled basin, additional water can then be sourced from the regional network and is allocated to satisfy the allocation shortage of the General User.\nThe allocation of water is decided intermittently by a separate process. This separate process is not all-knowing and it may overextract. Like other water balance sinks, negative storage is avoided and smooth numerical behavior is ensured via an activation function:\n\\[\nQ_{user} = Q_{alloc} * (0.5 \\tanh(S - 50.0) / 10.0) + 0.5\n\\]"
  },
  {
    "objectID": "equations.html#level-control",
    "href": "equations.html#level-control",
    "title": "Water balance",
    "section": "2.2 Level Control",
    "text": "2.2 Level Control\nA level-controlled basin (local_surface_water_type = \"P\") has a user demand referred to as water management (\\(\\demwm\\)). The purpose of this demand is to maintain the water levels for each basin at a target level. This target levels is determined externally. The \\(\\demwm\\) is negative if additional water is required to increase the water level in the basin, or positive if there is surplus water which must be removed to lower the level in the basin. When \\(\\demwm\\) is positive and there is surplus water, Bach is designed to make any surplus water available to General Users within the basin for abstraction. This is modelled by adding the \\(\\demwm\\) to the \\(\\qavail\\) in calculated in Equation 2.\n\\[\n\\qavail = \\demwm\n\\tag{2}\\]\nWhen the \\(\\demwm\\) is negative, the \\(\\demwm\\) is allocated first from the basin \\(\\qavail\\), and then secondly with water from the national network, should the local basin water not be sufficient to satisfy \\(\\demwm\\). This demand is therefore handled similar to that of a General User. In the case that a General User is allocated water as a higher priority than the Level Control such that the water level of the basin decreases, the \\(\\demwm\\) will increase accordingly. However, in most cases the demand for Level Control is higher than that of the General Users so this does not occur."
  },
  {
    "objectID": "equations.html#flushing",
    "href": "equations.html#flushing",
    "title": "Water balance",
    "section": "2.3 Flushing",
    "text": "2.3 Flushing\nThe flushing requirement for the basin is a special case of user. Flushing is required to maintain water quality in the basin. This is determined externally. Water from the national network flows into the basin, and the same volume gets removed from the basin back to the national network. This water cannot be allocated to other users and there is no net change to the water level in the basin or the \\(\\qavail\\), see Equation 3.\n\\[\n\\mathit{Q_{in}} = -\\mathit{Q_{out}}\n\\tag{3}\\]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bach",
    "section": "",
    "text": "Bach is a water resources model, designed to be the replacement of the regional surface water modules Mozart and SIMRES in the Netherlands Hydrological Instrument (NHI). Bach is a work in progress, it is a prototype that demonstrates all essential functionalities. Further development of the prototype in a software release is planned in 2022 and 2023.\nBach is written in the Julia programming language and is built on top of the SciML: Open Source Software for Scientific Machine Learning libraries, notably ModelingToolkit.jl."
  },
  {
    "objectID": "index.html#water-balance-equations",
    "href": "index.html#water-balance-equations",
    "title": "Bach",
    "section": "2.1 Water balance equations",
    "text": "2.1 Water balance equations\nThe water balance equation for a drainage basin (Wikipedia contributors 2022) can be defined a first-order ordinary differential equation (ODE), where the change of the storage \\(S\\) over time is determined by the inflow fluxes minus the outflow fluxes.\n\\[\n\\frac{\\mathrm{d}S}{\\mathrm{d}t} = Q_{in} - Q_{out}\n\\]\nWe can split out the fluxes into separate terms, such as precipitation \\(P\\), evapotranspiration \\(ET\\) and runoff \\(R\\). For now other fluxes are combined into \\(Q_{rest}\\). If define all fluxes entering our reservoir as positive, and those leaving the system to be negative, all fluxes can be summed up.\n\\[\n\\frac{\\mathrm{d}S}{\\mathrm{d}t} = R + P + ET + Q_{rest}\n\\]\nSuch a water balance ODE can be represented in ModelingToolkit.jl as follows:\nusing ModelingToolkit\n\n@variables t S(t) R(t) P(t) ET(t) Q_rest(t)  # independent and dependent variables\nD = Differential(t)       # define an operator for the differentiation w.r.t. time\n\nsys = ODESystem([D(S) ~ R + P + ET + Q_rest])\nOn the last line, an ODESystem is created that consists of a single equation. Before we can solve this, we need to create an ODEProblem, that provides information about the timespan of the simulation, as well as the initial conditions.\nBach can be used as a Julia package running in a Julia session or as an application initialized via TOML configuration files. Both uses are demonstrated in the demonstrations."
  },
  {
    "objectID": "index.html#time",
    "href": "index.html#time",
    "title": "Bach",
    "section": "2.2 Time",
    "text": "2.2 Time\nThe water balance equation can be applied on many timescales; years, weeks, days or hours. Depending on the application and available data any of these can be the best choice. In Bach, we make use of DifferentialEquations.jl and can use any of its ODE solvers. Many of these solvers make use of adaptive time stepping, which means the solver will decide how large the time steps can be depending on the state of the system.\nThe forcing, like precipitation, is generally provided as a time series. Bach is set up to support unevenly spaced timeseries. The solver will stop on timestamps where new forcing values are available, so they can be loaded as the new value.\nBach is essentially a continuous model, rather than daily or hourly. If you want to use hourly forcing, you only need to make sure that your forcing data contains hourly updates. The output frequency can be configured independently. To be able to write a closed water balance on e.g. a daily basis, we integrate the timeseries over the days. This way any variation inside of the days is also included, and we can output in m³ rather than m³s⁻¹."
  },
  {
    "objectID": "index.html#space",
    "href": "index.html#space",
    "title": "Bach",
    "section": "2.3 Space",
    "text": "2.3 Space\nThe water balance equation can be applied on different spatial scales. Besides modelling a single lumped watershed, it allows you to divide the area into a network of connected representative elementary watersheds (REWs) (Reggiani, Sivapalan, and Majid Hassanizadeh 1998). At this scale global water balance laws can be formulated by means of integration of point-scale conservation equations over control volumes. Such an approach makes Bach a semi-distributed model. In this document we typically use the term “basin” to refer to the REW. (In Mozart the spatial unit was called Local Surface Water (LSW)). Each basin has an associated polygon, and the set of basins is connected to each other as described by a graph, which we call the network. Below is a representation of both on the map.\n\n\n\nMozart Local Surface Water polygons and their drainage.\n\n\nThe network is described as graph. Flow can be bi-directional, and the graph does not have to be acyclic.\n\n\n\n\ngraph LR;\n    A[\"basin A\"] --- B[\"basin B\"];\n    A --- C[\"basin C\"];\n    B --- D[\"basin D\"];\n    C --- D;\n\n\n\n\n\n\n\n\nInternally a directed graph is used. The direction is defined to be the positive flow direction, and is generally set in the dominant flow direction. The basins are the nodes of the network graph. Basin states and properties such storage volume, wetted area are associated with the nodes (A, B, C, D), as are most forcing data such as precipitation, evaporation, or water demand. Basin connection properties and interbasin flows are associated with the edges (the lines between A, B, C, and D) instead.\nMultiple basins may exist within the same spatial polygon, representing different aspects of the surface water system (perennial ditches, ephemeral ditches, or even surface ponding). Figure 1, Figure 2, Figure 3 show the 25.0 m rasterized primary, secondary, and tertiary surface waters as identified by BRT TOP10NL (Kaart (PDOK) 2022) in the Hupsel basin (as defined in the Mozart LSW’s). These systems may represented in multiple ways.\n\n\n\nFigure 1: Hupsel: primary surface water.\n\n\n\n\n\nFigure 2: Hupsel: secondary surface water.\n\n\n\n\n\nFigure 3: Hupsel: tertiary surface water.\n\n\nAs a single basin (A) containing all surface water, discharging to its downstream basin to the west (B):\n\n\n\n\ngraph LR;\n    A[\"basin A\"] --> B[\"basin B\"];\n\n\n\n\n\n\n\n\nSuch a system may be capable of representing discharge, but it cannot represent residence times or differences in solute concentrations: within a single basin, drop of water is mixed instantaneously. Instead, we may the group primary (P), secondary (S), and tertiary (T) surface waters. Then T may flow into S, S into P, and P discharges to the downstream basin (B.)\n\n\n\n\ngraph LR;\n    T[\"basin T\"] --> S[\"basin S\"];\n    S --> P[\"basin P\"]; \n    P --> B[\"basin B\"];\n\n\n\n\n\n\n\n\nAs each (sub)basin has its own volume, low throughput (high volume, low discharge, long residence time) and high throughput (low volume, high discharge, short residence time) systems can be represented in a lumped manner; of course, more detail requires more parameters."
  },
  {
    "objectID": "modflow.html",
    "href": "modflow.html",
    "title": "Modflow Coupling",
    "section": "",
    "text": "Bach has been designed to provide a computationally efficient representation of surface water for MODFLOW6. It does so by connecting to basic MODFLOW6 boundary conditions: the river and drainage packages.\nBach connects to MODFLOW6 via the Basic Model Interface (BMI) and Extended Model Interface (XMI) (Hughes et al. 2022). BMI describes the interface to initialize a model, get values from its memory, run a timestep, etc. XMI extends this interface to allow much finer control into MODFLOW6’s solution procedures. We have written a Julia package (Deltares 2022) which implements this interface for the Julia programming language. In coupling, Bach uses this interface to get the head values, the boundary condition water levels, and the budgets term of the MODFLOW6 groundwater model while MODFLOW6 is running.\nAdditionally, links can be made with other (BMI/XMI-compliant) processes and models. One example of such a link is using the surface runoff and the agricultural irrigation demand calculated by an unsaturated zone model; in the Netherlands Hydrological Instrument MetaSWAP provides this demand."
  },
  {
    "objectID": "modflow.html#drainage",
    "href": "modflow.html#drainage",
    "title": "Modflow Coupling",
    "section": "1.1 Drainage",
    "text": "1.1 Drainage\nThe drainage package can be simulated to agricultural drains, ditches, or draining streams. The amount of water removed from the aquifer is proportional to the difference between the groundwater head and the drainage elevation. Drainage only occurs when the head is larger than the elevation; this boundary condition does not allow infiltration into the groundwater.\n\\[\nQ_{drain} = \\left\\{\n    \\begin{array}{ c l }\n        C_{drain} (\\phi - h_{drain}) & \\quad \\textrm{if } \\phi > h_{drain} \\\\\n        0                            & \\quad \\textrm{otherwise}\n     \\end{array}\n\\right.\n\\]"
  },
  {
    "objectID": "modflow.html#river",
    "href": "modflow.html#river",
    "title": "Modflow Coupling",
    "section": "1.2 River",
    "text": "1.2 River\nThe river package can both drain the groundwater, or infiltrate surface water to the groundwater. It limits the amount of water that can infiltrate when the groundwater head falls below the river bottom, in which cases it assumes atmospheric pressure conditions underneath the surface water.\n\\[\nQ_{river} = \\left\\{\n    \\begin{array}{ c l }\n        C_{river} (\\phi - h_{river}) & \\quad \\textrm{if } \\phi > b_{river} \\\\\n        C_{river} (h_{river} - b_{river}) & \\quad \\textrm{if } \\phi <= b_{river}\n     \\end{array}\n\\right.\n\\]\nIn the Netherlands, it is somewhat common to make a distinction between the drainage and infiltration conductance of surface waters. Drainage conductance is often larger than the infiltration conductance due to clogging processes, seepage through sides of the ditches, less contracted flow lines, etc.\n\\[\nQ_{river} = \\left\\{\n    \\begin{array}{ c l }\n        C_{river,drn} (\\phi - h_{river}) & \\quad \\textrm{if } \\phi > h_{river} \\\\\n        C_{river,inf} (\\phi - h_{river}) & \\quad \\textrm{if } \\phi <= h_{river} \\\\\n        C_{river,inf} (h_{river} - b_{river}) & \\quad \\textrm{if } \\phi <= b_{river}\n     \\end{array}\n\\right.\n\\]\nMODFLOW6 does not support this (currently), but an identical effect may be achieved by “stacking” a drainage package on top of a river package with these values:\n\\[\n\\begin{array}{ c l }\n  h_{drain} = h_{river} \\\\\n  C_{drain} = C_{river,drn} - C_{river,inf}\n\\end{array}\n\\]"
  },
  {
    "objectID": "modflow.html#numerical-solution-in-modflow",
    "href": "modflow.html#numerical-solution-in-modflow",
    "title": "Modflow Coupling",
    "section": "2.1 Numerical solution in MODFLOW",
    "text": "2.1 Numerical solution in MODFLOW\nMODFLOW uses a backward-in-time implicit solution scheme. This creates a large system of equations (a water balance for every cell), which it solves by repeatedly solving a linearized system of equations instead. In matrix form, this system of equations is expressed by:\n\\[\n\\mathbf{Ax} = \\mathbf{b}\n\\]\nWhere \\(\\mathbf{x}\\) is a vector containing the head of every cell.\nFor the boundary conditions, this requires linearization of the flow equations. Flow from outside of the aquifer (cell) may be represented by:\n\\[\na = p\\phi + q\n\\]\n(Equation 2-6 in the MODFLOW6 documentation (Langevin et al. 2017).)\nFor e.g. a draining boundary condition, the flow is head dependent:\n\\[\na = C(h - \\phi) = -C\\phi + Ch\n\\]\nWith \\(C\\) the conductance, \\(h\\) the boundary head or elevation, and \\(\\phi\\) the groundwater head.\nIn MODFLOW’s internal formulation, the term in \\(\\mathbf{A}\\) is called “coefficient of head” or hcof. Terms in \\(\\mathbf{b}\\) are called “right hand side” or rhs. We can separate the equation above:\n\\[\n\\begin{aligned}\np = \\text{hcof} = -C \\\\\nq = \\textrm{rhs} = -Ch \\\\\na = -C\\phi + Ch = \\text{hcof} * \\phi - \\text{rhs}\n\\end{aligned}\n\\]\nFor every boundary condition, MODFLOW6 stores the hcof and rhs values. This makes it quite convenient for us to compute the water budget for every boundary condition: we simply multiply the hcof value by the head of the cell and subtract the rhs.\nNote that hcof may have a value of 0! For example, when for a river boundary the \\(\\phi <= b_{river}\\) condition occurs, the flow into the cell is controlled only by \\(h_{river}\\) and \\(b_{river}\\) (equal to recharge for the linear solution)."
  },
  {
    "objectID": "modflow.html#sequential-coupled-solution",
    "href": "modflow.html#sequential-coupled-solution",
    "title": "Modflow Coupling",
    "section": "2.2 Sequential coupled solution",
    "text": "2.2 Sequential coupled solution\nA coupled run stars by initializing both models and creating the exchange information: which MODFLOW6 boundary condition is connected to which Bach basin. While the model is running, the model proceeds through time as follows:\n\nBach solves the equations on a basin level; this occurs with adaptive timestepping via ModelingToolkit.\nAt a specified time (in accordance with the MODFLOW6 time discretization), the volumes are converted to MODFLOW6 boundary condition levels using a Callback function.\nMODFLOW6 runs a timestep.\nThe drainage and infiltration budgets are computed from MODFLOW6 using the equations described above and aggregated per basin.\nThe aggregated values are set as Bach boundary conditions, and Bach solves until the next preset exchange time.\n\nThese steps run until the final timestep is finished."
  },
  {
    "objectID": "modflow.html#iterative-coupled-solution",
    "href": "modflow.html#iterative-coupled-solution",
    "title": "Modflow Coupling",
    "section": "2.3 Iterative coupled solution",
    "text": "2.3 Iterative coupled solution\n\n\n\n\n\n\nNote\n\n\n\nWe have not implemented an iterative coupled solution yet. The section below describes an approach.\n\n\nThe simplest form of a iterative solution occurs as follows:\n\nMODFLOW6 computes drainage and infiltration flows.\nBach uses these flows to compute a storage volume for the basin.\nThe volume is translated to a water level for every MODFLOW6 boundary condition in the basins.\nMODFLOW6 recomputes drainage and infiltration flows with the updated water levels, etc.\n\nSuch a scheme is not maximally efficient: the discharge and infiltration terms are not constant, but are driven by a head difference. This head difference depends on the level of the boundary conditions and head of every cell of the groundwater model. If the surface waters of a basin empty, the water level will decrease and drainage and infiltration flows will change. Ideally, we can provide Bach with more information, so that it may estimate drainage and infiltration terms better.\nAs groundwater flow is often (approximately) linear, we can use linearization to more efficiently compute the flow from Bach’s side as well. In the iterative coupled solution, we are solving both MODFLOW6 and Bach repeatedly, until they produce same drainage or infiltration (approximately). One of Bach’s basins contains many MODFLOW cells with boundary conditions. We could add every boundary condition to Bach’s equations, but this is costly and cumbersome. Fortunately, linearization allows us to “stack” (superpose) all the different boundary conditions into a single, simple equation. In linear form, every equation takes the form of:\n\\[\na = ph + q\n\\]\nNote the \\(h\\) rather than \\(\\phi\\), we are formulating from Bach’s perspective! We can sum all coefficients for p and q to provide a linear groundwater response to Bach.\n\n2.3.1 Drainage\nFrom Bach’s perspective, the groundwater head is constant given a timestep, so that:\n\\[\n\\begin{align}\np = -C \\\\\nq = -C\\phi\n\\end{align}\n\\]\nWhen the head falls below the drainage elevation, the coefficients are 0.\n\n\n2.3.2 River\nFrom Bach’s persective, infiltration is never limited when the head falls below the bottom:\n\\[\n\\begin{align}\np = -C \\\\\nq = -Cb\n\\end{align}\n\\]\nOtherwise, infiltration and drainage occur with the same equation as for the drainage package:\n\\[\n\\begin{align}\np = -C \\\\\nq = -C\\phi\n\\end{align}\n\\]"
  },
  {
    "objectID": "modflow.html#parametrization",
    "href": "modflow.html#parametrization",
    "title": "Modflow Coupling",
    "section": "3.1 Parametrization",
    "text": "3.1 Parametrization\nIn coupling Bach to MODFLOW6, relations translating the Bach volume must be given for every every cell of every boundary condition. These consist of piecewise linear relationships between the basin volume and its associated water level for the boundary condition in the cell. The MODFLOW6 coupling example cases show examples of such a parametrization."
  }
]